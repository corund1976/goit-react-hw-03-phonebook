{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/ContactList/ContactList.module.css","components/Container/Container.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","Container","children","className","s","container","Section","section","INITIAL_STATE","name","number","ContactForm","state","handleInputChange","e","currentTarget","value","setState","handleBtnSubmit","preventDefault","props","addContact","reset","this","onSubmit","form","autoComplete","label","type","pattern","title","required","onChange","input","btn","Component","Filter","changeFilter","Contact","deleteContact","id","contactItem","contact","onClick","ContactList","filteredContacts","contactList","map","App","contacts","filter","uuidv4","some","toLowerCase","alert","prevState","showFilteredContacts","normalizedFilter","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac89a89e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1A3Cv\",\"label\":\"ContactForm_label__23qLj\",\"input\":\"ContactForm_input__3wdnZ\",\"btn\":\"ContactForm_btn__2Kh20\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"Contact_contactItem__EsMd3\",\"contact\":\"Contact_contact__crwMW\",\"btn\":\"Contact_btn__AvxZg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3i1WF\",\"input\":\"Filter_input__24Sjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1ysIm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__dFdhB\",\"title\":\"Section_title__2BYWG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__4ruvF\"};","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return (\r\n    <div className={s.container}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Container;","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Section;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n// Выносим объект с примитивами в константу, чтобы было удобно сбрасывать.\r\n// Нельзя использовать, если в каком-то свойстве состояния хранится сложный тип.\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  // в форме стейт нужен только при сабмите, поэтому храним\r\n  // его в компоненте формы, а при сабмите - отдаем наружу\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n  // Для всех инпутов создаем один обработчик\r\n  // \"паттерн ввод данных\" ->\r\n  handleInputChange = e => {\r\n    // подходит для инпутов, у которых есть name and value, \r\n    // для радиокнопок, но не чекбоксов\r\n    const { name, value } = e.currentTarget;\r\n    // Различать инпуты будем по атрибуту \"name\",\r\n    // применяя вычисляемые свойства объекта\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleBtnSubmit = e => {\r\n    e.preventDefault();\r\n    // у обьекта this (а это наш class ContactForm) проп, который \r\n    // передается при вызове в App - функция addContact. передаем \r\n    // ей текущее состояние state при Submitе формы\r\n    this.props.addContact({ ...this.state });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    \r\n    return (\r\n      <form\r\n        onSubmit={this.handleBtnSubmit} \r\n        className={s.form} \r\n        autoComplete=\"off\">\r\n        \r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n                value={name}\r\n                onChange={this.handleInputChange}\r\n                className={s.input}\r\n          />\r\n        </label>\r\n\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            name=\"number\"\r\n            type=\"tel\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n                value={number}\r\n                onChange={this.handleInputChange}\r\n                className={s.input}\r\n          />\r\n        </label>        \r\n\r\n        <button type=\"submit\" className={s.btn}>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n}\r\n// Проблема обновления состояния - всегда должно быть новое после рендера,  \r\n// а не мутировать по ссылке старое.\r\n// Проверка на имутабеольность (равны ли эти значения между рендерами) ->\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   console.log(prevState.name === this.state.name);\r\n// }","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ value, changeFilter }) {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name / number\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={changeFilter}\r\n        className={s.input}>\r\n      </input>\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  changeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import PropTypes from 'prop-types';\r\nimport s from './Contact.module.css';\r\n\r\nfunction Contact({ deleteContact, id, name, number }) {\r\n  const deleteContactCB = () => deleteContact(id);\r\n  \r\n  return (\r\n    <li className={s.contactItem}>\r\n      <p className={s.contact}>• {name}: {number}</p>\r\n      <button className={s.btn} onClick={deleteContactCB}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Contact;","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport Contact from '../Contact';\r\n\r\nfunction ContactList({ deleteContact, filteredContacts }) {\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {filteredContacts.map(({ id, name, number }) => {\r\n        return (\r\n          <Contact\r\n            key={id}\r\n            deleteContact={deleteContact}\r\n            id={id}\r\n            name={name}\r\n            number={number}>\r\n          </Contact>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  filteredContacts: PropTypes.arrayOf(\r\n    PropTypes.shape()).isRequired,\r\n};\r\n\r\nexport default ContactList;","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.css';\nimport Container from './components/Container';\nimport Section from './components/Section';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  //===== Метод добавления нового контакта =====\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    // Проверка на повторный ввод существующего контакта\n    contacts.some(contact =>\n      contact.name.toLowerCase() === name.toLowerCase())\n      ?\n        alert(`${name} is already in contacts.`)\n      : \n        this.setState(prevState => ({\n          contacts: [contact, ...prevState.contacts],\n        }));\n  }\n\n  //===== Метод удаления контакта =====\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  //===== Метод фильтра\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  // делаем видимыми контакты, которые соответствуют тексту поиска в инпуте\n  showFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter) ||\n      contact.number.includes(filter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const { addContact, changeFilter, deleteContact, showFilteredContacts } = this;\n    return (\n      <Container>\n        <Section>\n          <h1>Phonebook</h1>\n          <ContactForm\n            addContact={addContact} />\n        </Section>\n        \n        <Section>\n          <h2>Contacts</h2>\n          <Filter\n            value={filter}\n            changeFilter={changeFilter} />\n          <ContactList\n            filteredContacts={showFilteredContacts()}\n            deleteContact={deleteContact} />\n        </Section>\n      </Container>\n    );\n  }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}